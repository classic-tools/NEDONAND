v2.0 raw
# test codes for Logisim simulation of "NEDONAND LITE"

#   x0    x1    x2    x3    x4    x5    x6    x7    x8    x9    xA    xB    xC    xD    xE    xF  
#0x A=0   A=1   A=2   A=3   A=4   A=5   A=6   A=7   A=8   A=9   A=10  A=11  A=12  A=13  A=14  A=15  0x
#1x A=16  A=17  A=18  A=19  A=20  A=21  A=22  A=23  A=24  A=25  A=26  A=27  A=28  A=29  A=30  A=31  1x
#2x A=32  A=33  A=34  A=35  A=36  A=37  A=38  A=39  A=40  A=41  A=42  A=43  A=44  A=45  A=46  A=47  2x
#3x A=48  A=49  A=50  A=51  A=52  A=53  A=54  A=55  A=56  A=57  A=58  A=59  A=60  A=61  A=62  A=63  3x
#4x A=64  A=65  A=66  A=67  A=68  A=69  A=70  A=71  A=72  A=73  A=74  A=75  A=76  A=77  A=78  A=79  4x
#5x A=80  A=81  A=82  A=83  A=84  A=85  A=86  A=87  A=88  A=89  A=90  A=91  A=92  A=93  A=94  A=95  5x
#6x A=96  A=97  A=98  A=99  A=100 A=101 A=102 A=103 A=104 A=105 A=106 A=107 A=108 A=109 A=110 A=111 6x
#7x A=112 A=113 A=114 A=115 A=116 A=117 A=118 A=119 A=120 A=121 A=122 A=123 A=124 A=125 A=126 A=127 7x
#8x HALT  N/A   N/A   N/A   N/A   N/A   N/A   N/A   NOP   A=~A  A=B   A=C   A=D   A=E   A=F   A=G   8x
#9x B=0   B=A   B=~B  B=C   B=D   B=E   B=F   B=G   C=0   C=A   C=B   C=~C  C=D   C=E   C=F   C=G   9x
#Ax D=0   D=A   D=B   D=C   D=~D  D=E   D=F   D=G   E=0   E=A   E=B   E=C   E=D   E=~E  E=F   E=G   Ax
#Bx F=0   F=A   F=B   F=C   F=D   F=E   F=~F  F=G   G=0   G=A   G=B   G=C   G=D   G=E   G=F   G=~G  Bx 
#Cx RRC 0 RRC A RRC B RRC C RRC D RRC E RRC F RRC G RLC 0 RLC A RLC B RLC C RLC D RLC E RLC F RLC G Cx
#Dx NAN 0 NAN A NAN B NAN C NAN D NAN E NAN F NAN G XOR 0 XOR A XOR B XOR C XOR D XOR E XOR F XOR G Dx
#Ex ADC 0 ADC A ADC B ADC C ADC D ADC E ADC F ADC G SBC 0 SBC A SBC B SBC C SBC D SBC E SBC F SBC G Ex
#Fx A=A+0 A=A+1 A=A+2 A=A+3 A=A+4 A=A+5 A=A+6 A=A+7 A=A-8 A=A-7 A=A-6 A=A-5 A=A-4 A=A-3 A=A-2 A=A-1 Fx
#   x0    x1    x2    x3    x4    x5    x6    x7    x8    x9    xA    xB    xC    xD    xE    xF  

#Aliases: SEC:XOR 0, CLC:A=A+0, AFF:NAN 0 (A=FF)

#Flags:
# bit 7: S - sign (negative result of previous operation);
# bit 6: Z - zero (zero result of previous operation);
# bit 5: V - overflow (sign overflow in case of add/subtract);
# bit 4: C - carry/borrow (borrow is inverted);
# bit 3: H - half carry (between nibbles);
# bit 2: P10\
# bit 1: P9 - higher bits to set PC in case of jump (reg.G)
# bit 0: P8 /

# clear all registers
00 90 98 A0 A8 B0
# [6] main program
B0 # F=0
0A # A=10
99 # C=A
0B # A=11
D8 # SEC (XOR 0)
EB # SBC C
91 # B=A
99 # C=A
A6 # D=F
AE # E=F
06 # A="1"
80 # HALT
# must be "1" 01 01 18 18
B0 # F=0
0A # A=10
99 # C=A
0B # A=11
D8 # SEC (XOR 0)
EB # SBC C
A6 # D=F
AE # E=F
91 # B=A
99 # C=A
5B # A="2"
80 # HALT
# must be "2" 01 01 18 18
B0 # F=0
0A # A=10
99 # C=A
0B # A=11
D8 # SEC (XOR 0)
A6 # D=F
EB # SBC C
AE # E=F
91 # B=A
99 # C=A
4F # A="3"
80 # HALT
# must be "3" 01 01 08 18
B0 # F=0
0A # A=10
99 # C=A
0B # A=11
B6 # F=~F (opcode may be unavailable in future)
A6 # D=F
EB # SBC C
AE # E=F
91 # B=A
99 # C=A
66 # A="4"
80 # HALT
# must be "4" 01 01 ff ff

# goto 0
B0 # F=0
B8 # G=0
